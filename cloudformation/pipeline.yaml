AWSTemplateFormatVersion: 2010-09-09
Description: Pipeline for deployment of tools.
Parameters:
  PipelineName:
    Type: String
    Description: Name of pipeline.
    Default: tools
    AllowedPattern: "^[-a-z0-9]*$"
    ConstraintDescription: Pipeline name can include numbers, lowercase letters, and hyphens (-).
  WebBucketName:
    Type: String
    Description: Name of the web s3 bucket.
    Default: tools.ewelists.com
  GitHubUser:
    Type: String
    Description: GitHub User
    Default: Ewelists
  GitHubBranch:
    Type: String
    Description: GitHub Branch
    Default: "master"
  GitHubToken:
    Type: String
    NoEcho: true
    Description: Personal Access Token.
  GitHubSecret:
    Type: String
    NoEcho: true
  InfraRepo:
    Type: String
    Description: Tools Infra Repository Name
    Default: ewelists.com-tools
  ServicesRepo:
    Type: String
    Description: Tools Services Repository Name
    Default: ewelists.com-tools-services
  WebRepo:
    Type: String
    Description: Tools Web Repository Name
    Default: ewelists.com-tools-web
  WebInfraTemplatePath:
    Default: cloudformation/web-infra.yaml
    Description: The path of the Web stack template
    Type: String

Resources:
  PipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'pipeline-ewelists-${PipelineName}-${AWS::Region}-artifacts'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - Id: Build logs expiration
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            ExpirationInDays: 180
            Prefix: '*'
            Status: Enabled

  ToolsServiceBuildsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: services-builds-tools
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - Id: Builds expiration
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            ExpirationInDays: 60
            Prefix: '*'
            Status: Enabled

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'pipeline-${PipelineName}-ServiceRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: PipelineServiceRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:SetStackPolicy
                  - iam:PassRole
                  - sns:Publish
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: "*"

  MainWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubSecret
      Filters:
        -
          JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref Pipeline
      TargetAction: Main
      Name: ToolsMainWebhook
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  WebWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubSecret
      Filters:
        -
          JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref Pipeline
      TargetAction: Web
      Name: ToolsWebWebhook
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  ServicesWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubSecret
      Filters:
        -
          JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref Pipeline
      TargetAction: Services
      Name: ToolsServicesWebhook
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Main
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
              - Name: S-Main
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref InfraRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              RunOrder: 1
            - Name: Web
              Namespace: WebSourceVariables
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
              - Name: S-Web
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref WebRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              RunOrder: 1
            - Name: Services
              Namespace: ServicesVariables
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
              - Name: S-Services
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref ServicesRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Services-Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref ToolsBuildProject
              InputArtifacts:
                - Name: S-Services
              OutputArtifacts:
                - Name: B-Services
            - Name: Services-UnitTests
              ActionTypeId:
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref ToolsUnitTestsProject
              InputArtifacts:
                - Name: S-Services
        - Name: Staging
          Actions:
            - Name: Deploy-Main
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: S-Main
              OutputArtifacts:
                - Name: D-Main-Staging
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt [MainCFNRole, Arn]
                StackName: Web-Tools-Staging
                TemplatePath: !Sub "S-Main::${WebInfraTemplatePath}"
                ParameterOverrides: '{ "Environment": "staging" }'
                OutputFileName: MainOutput.json
              RunOrder: 1
            - Name: Deploy-Services
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: B-Services
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt ServicesCFNRole.Arn
                StackName: Service-Tools-Staging
                TemplatePath: B-Services::tools-packaged.yaml
                Capabilities: CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM
                ParameterOverrides: '{ "Environment": "staging" }'
              RunOrder: 1
            - Name: Integration-Tests
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: S-Services
              Configuration:
                ProjectName: !Ref ToolsIntegrationTestsProject
                EnvironmentVariables: '[{"name":"ENVIRONMENT_ID","value":"/Postman/Environment/Staging","type":"PARAMETER_STORE"}]'
              RunOrder: 2
            - Name: Deploy-Web
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: S-Web
              OutputArtifacts:
                - Name: D-Web-Staging
              Configuration:
                ProjectName: !Ref WebDeployContentProject
                EnvironmentVariables: !Sub |
                  [
                    {"name": "Commit_ID", "value": "#{WebSourceVariables.CommitId}", "type": "PLAINTEXT"},
                    {"name":"ENVIRONMENT","value":"staging","type":"PLAINTEXT"},
                    {"name":"WEB_BUCKET","value":"staging.${WebBucketName}","type":"PLAINTEXT"}
                  ]
              RunOrder: 3
            - Name: End-To-End-Tests
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: S-Web
              Configuration:
                ProjectName: !Ref ToolsE2ETestsProject
                BatchEnabled: true
                EnvironmentVariables: '[
                  {"name":"ENVIRONMENT","value":"staging","type":"PLAINTEXT"},
                  {"name":"CONFIG","value":"cypress.staging.json","type":"PLAINTEXT"},
                  {"name":"COMMIT_ID","value":"#{WebSourceVariables.CommitId}","type":"PLAINTEXT"},
                  {"name":"COMMIT_MSG","value":"#{WebSourceVariables.CommitMessage}","type":"PLAINTEXT"},
                  {"name":"COMMIT_URL","value":"#{WebSourceVariables.CommitUrl}","type":"PLAINTEXT"},
                  {"name":"TEST_TAG","value":"smoke","type":"PLAINTEXT"}
                ]'
              RunOrder: 4
        - Name: Prod
          Actions:
            - Name: Approve-Deploy
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              RunOrder: 1
            - Name: Deploy-Main
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: S-Main
              OutputArtifacts:
                - Name: D-Main-Prod
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt [MainCFNRole, Arn]
                StackName: Web-Tools-Prod
                TemplatePath: !Sub "S-Main::${WebInfraTemplatePath}"
                ParameterOverrides: '{ "Environment": "prod" }'
                OutputFileName: MainOutput.json
              RunOrder: 2
            - Name: Deploy-Services
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: B-Services
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt ServicesCFNRole.Arn
                StackName: Service-Tools-Prod
                TemplatePath: B-Services::tools-packaged.yaml
                Capabilities: CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM
                ParameterOverrides: '{ "Environment": "prod" }'
              RunOrder: 2
            - Name: Integration-Tests
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: S-Services
              Configuration:
                ProjectName: !Ref ToolsIntegrationTestsProject
                EnvironmentVariables: '[{"name":"ENVIRONMENT_ID","value":"/Postman/Environment/Prod","type":"PARAMETER_STORE"}]'
              RunOrder: 3
            - Name: Deploy-Web
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: S-Web
              OutputArtifacts:
                - Name: D-Web-Prod
              Configuration:
                ProjectName: !Ref WebDeployContentProject
                EnvironmentVariables: !Sub |
                  [
                    {"name": "Commit_ID", "value": "#{WebSourceVariables.CommitId}", "type": "PLAINTEXT"},
                    {"name":"ENVIRONMENT","value":"prod","type":"PLAINTEXT"},
                    {"name":"WEB_BUCKET","value":"${WebBucketName}","type":"PLAINTEXT"}
                  ]
              RunOrder: 4
            - Name: End-To-End-Tests
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: S-Web
              Configuration:
                ProjectName: !Ref ToolsE2ETestsProject
                BatchEnabled: true
                EnvironmentVariables: '[
                  {"name":"ENVIRONMENT","value":"prod","type":"PLAINTEXT"},
                  {"name":"CONFIG","value":"cypress.prod.json","type":"PLAINTEXT"},
                  {"name":"COMMIT_ID","value":"#{WebSourceVariables.CommitId}","type":"PLAINTEXT"},
                  {"name":"COMMIT_MSG","value":"#{WebSourceVariables.CommitMessage}","type":"PLAINTEXT"},
                  {"name":"COMMIT_URL","value":"#{WebSourceVariables.CommitUrl}","type":"PLAINTEXT"},
                  {"name":"TEST_TAG","value":"smoke","type":"PLAINTEXT"}
                ]'
              RunOrder: 5

  ToolsBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ToolsService-API-Builds
      Description: Builds Tools service repo APIs
      ServiceRole: !GetAtt ToolsServiceBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: LOCAL
        Modes:
        - LOCAL_DOCKER_LAYER_CACHE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: TOOLS_BUILD_OUTPUT_BUCKET
            Value: !Ref ToolsServiceBuildsBucket
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yaml
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref ToolsServiceLogGroup
          StreamName: Builds
      TimeoutInMinutes: 10

  ToolsUnitTestsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ToolsService-UnitTests
      Description: Performs the unit testing of the lambda functions.
      ServiceRole: !GetAtt ToolsServiceBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: LOCAL
        Modes:
        - LOCAL_DOCKER_LAYER_CACHE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-unittests.yaml
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref ToolsServiceLogGroup
          StreamName: UnitTests
      TimeoutInMinutes: 10

  ToolsIntegrationTestsProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: ToolsService-Integration-Tests
      Description: Performs integration testing via Postman API.
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: LOCAL
        Modes:
        - LOCAL_DOCKER_LAYER_CACHE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:4.0'
      ServiceRole: !GetAtt ToolsServiceBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-postman.yaml
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref ToolsServiceLogGroup
          StreamName: Integration-Tests

  ToolsE2ETestsProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: ToolsService-E2E-Tests
      Description: Performs end-to-end tests with cypress.
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: LOCAL
        Modes:
        - LOCAL_DOCKER_LAYER_CACHE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:4.0'
      ServiceRole: !GetAtt E2EBuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-cypress.yaml
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref ToolsServiceLogGroup
          StreamName: E2E-Tests
      BuildBatchConfig:
        ServiceRole: !Ref E2EBatchServiceRole
        TimeoutInMins: 15
        Restrictions:
          MaximumBuildsAllowed: 10


  WebDeployContentProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: Web-Tools-Deploy-Content
      Description: Deploys react web application
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: LOCAL
        Modes:
        - LOCAL_DOCKER_LAYER_CACHE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: WEB_BUCKET
            Value: !Ref WebBucketName
          - Name: ENVIRONMENT
            Value: prod
      ServiceRole: !GetAtt WebDeployContentRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-react.yaml
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: web-tools
          StreamName: DeployContent

  WebDeployContentLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: web-tools
      RetentionInDays: 30

  WebDeployContentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ToolsWebDeployContentRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: WebDeployContentRolePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:web-tools"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:web-tools:*"
          - Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketVersioning
              - s3:ListBucket
            Resource:
              - !Sub "arn:aws:s3:::${PipelineArtifactBucket}/*"
              - !Sub "arn:aws:s3:::${WebBucketName}/*"
              - !Sub "arn:aws:s3:::${WebBucketName}"
              - !Sub "arn:aws:s3:::staging.${WebBucketName}/*"
              - !Sub "arn:aws:s3:::staging.${WebBucketName}"
          - Effect: Allow
            Action:
              - cloudfront:CreateInvalidation
              - cloudfront:ListDistributions
            Resource: '*'
          - Effect: Allow
            Action:
              - codepipeline:ListPipelineExecutions
            Resource: '*'
          Version: '2012-10-17'

  MainCFNRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'pipeline-${PipelineName}-MainCFN-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: ManageCloudFormation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                Effect: Allow
                Resource: '*'
        - PolicyName: SSLCertificateIdParameterStore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ssm:GetParameters
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tools.ewelists.com/staging/SSLCertificateId'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tools.ewelists.com/prod/SSLCertificateId'
        - PolicyName: ManageS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:PutBucketPublicAccessBlock
                  - s3:PutLifecycleConfiguration
                  - s3:PutBucketAcl
                  - s3:GetBucketAcl
                  - s3:PutBucketLogging
                  - s3:PutMetricsConfiguration
                  - s3:PutBucketWebsite
                  - s3:PutBucketPolicy
                  - s3:GetBucketPolicy
                Effect: Allow
                Resource:
                  - "arn:aws:s3:::tools.ewelists.com"
                  - "arn:aws:s3:::tools.ewelists.com/*"
                  - "arn:aws:s3:::tools.ewelists.com-logging"
                  - "arn:aws:s3:::tools.ewelists.com-logging/*"
                  - "arn:aws:s3:::staging.tools.ewelists.com"
                  - "arn:aws:s3:::staging.tools.ewelists.com/*"
                  - "arn:aws:s3:::staging.tools.ewelists.com-logging"
                  - "arn:aws:s3:::staging.tools.ewelists.com-logging/*"
        - PolicyName: ManageRoute53
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - route53:*
                Effect: Allow
                Resource:
                  - "*"
        - PolicyName: ManageCloudFront
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - cloudfront:CreateCloudFrontOriginAccessIdentity
                  - cloudfront:CreateDistribution
                  - cloudfront:DeleteDistribution
                  - cloudfront:GetCloudFrontOriginAccessIdentity
                  - cloudfront:GetCloudFrontOriginAccessIdentityConfig
                  - cloudfront:DeleteCloudFrontOriginAccessIdentity
                  - cloudfront:TagResource
                  - cloudfront:GetDistribution
                  - cloudfront:UpdateDistribution
                  - cloudfront:UpdateCloudFrontOriginAccessIdentity
                Effect: Allow
                Resource:
                  - "*"

  ToolsServiceBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ToolsServiceBuildAndTestRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ServicesRolePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ToolsServiceLogGroup}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ToolsServiceLogGroup}:*"
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Resource:
              - !Sub "arn:aws:s3:::${PipelineArtifactBucket}/*"
              - !Sub "arn:aws:s3:::${ToolsServiceBuildsBucket}/*"
          - Effect: Allow
            Action:
              - ssm:GetParameters
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Postman/*"
          Version: '2012-10-17'

  E2EBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ToolsServiceE2ETestsBuildProjectRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ArtifactsAndLogsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ToolsServiceLogGroup}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ToolsServiceLogGroup}:*"
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Resource:
              - !Sub "arn:aws:s3:::${PipelineArtifactBucket}/*"
              - !Sub "arn:aws:s3:::${ToolsServiceBuildsBucket}/*"
          Version: '2012-10-17'
      - PolicyName: CypressScriptsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - cognito-idp:*
            Resource:
              - Fn::ImportValue: Auth-Tools-staging-UserPoolArn
              - Fn::ImportValue: Auth-Tools-prod-UserPoolArn
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:DeleteItem'
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/lists-prod"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/lists-staging"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/notfound-prod"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/notfound-staging"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/products-prod"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/products-staging"
          - Effect: Allow
            Action:
              - ssm:GetParameters
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Cypress/Tools/Key"
          Version: '2012-10-17'

  E2EBatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ToolsServiceE2ETestsBatchServiceRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: BatchBuildsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - codebuild:StartBuild
              - codebuild:StopBuild
              - codebuild:RetryBuild
            Resource:
              - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/ToolsService-E2E-Tests'
          Version: '2012-10-17'


  ToolsServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: tools-service-logs
      RetentionInDays: 30

  ServicesCFNRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'pipeline-${PipelineName}-Tools-Service-CFN-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: ManageCloudFormation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                Effect: Allow
                Resource: '*'
        - PolicyName: ManagePiplineAndBuildArtifactBuckets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:PutBucketPublicAccessBlock
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:s3:::${PipelineArtifactBucket}/*"
                  - !Sub "arn:aws:s3:::${ToolsServiceBuildsBucket}/*"
        - PolicyName: ManageIam
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - iam:ListRoles
                  - iam:ListPolicies
                  - iam:GetRole
                  - iam:GetPolicy
                  - iam:CreateRole
                  - iam:CreatePolicy
                  - iam:DeleteRole
                  - iam:DeletePolicy
                  - iam:UpdateRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:getRolePolicy
                Effect: Allow
                Resource: '*'
        - PolicyName: ManageServerless
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - lambda:*
                  - apigateway:*
                Effect: Allow
                Resource: '*'
        - PolicyName: ParameterStore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ssm:GetParameters
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Ewelists/AlertEmail'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Ewelists/AlertNumber'
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - events:*
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/Service-Tools*'
        - PolicyName: SNS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - sns:List*
                  - sns:Get*
                Effect: Allow
                Resource: '*'
              - Action:
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:ConfirmSubscription
                  - sns:Set*
                  - sns:Subscribe
                  - sns:Unsubscribe
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:NotFound-*'
                  - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Backup-*'
        - PolicyName: Alarms
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - cloudwatch:*
                Effect: Allow
                Resource: '*'
